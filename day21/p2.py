import sys
from functools import cache

NUMPAD_PATH = {
  "7": {"7": "", "8": ">", "9": ">>",
        "4": "v", "5": "v>", "6": "v>>",
        "1": "vv", "2": "vv>", "3": "vv>>",
        "0": ">vvv", "A": ">>vvv"},
  "8": {"7": "<", "8": "", "9": ">",
        "4": "<v", "5": "v", "6": "v>",
        "1": "<vv", "2": "vv", "3": "vv>",
        "0": "vvv", "A": "vvv>"},
  "9": {"7": "<<", "8": "<", "9": "",
        "4": "<<v", "5": "<v", "6": "v",
        "1": "<<vv", "2": "<vv", "3": "vv",
        "0": "<vvv", "A": "vvv"},
  "4": {"7": "^", "8": "^>", "9": "^>>",
        "4": "", "5": ">", "6": ">>",
        "1": "v", "2": "v>", "3": "v>>",
        "0": ">vv", "A": ">>vv"},
  "5": {"7": "<^", "8": "^", "9": "^>",
        "4": "<", "5": "", "6": ">",
        "1": "<v", "2": "v", "3": "v>",
        "0": "vv", "A": "vv>"},
  "6": {"7": "<<^", "8": "<^", "9": "^",
        "4": "<<", "5": "<", "6": "",
        "1": "<<v", "2": "<v", "3": "v",
        "0": "<vv", "A": "vv"},
  "1": {"7": "^^", "8": "^^>", "9": "^^>>",
        "4": "^", "5": "^>", "6": "^>>",
        "1": "", "2": ">", "3": ">>",
        "0": ">v", "A": ">>v"},
  "2": {"7": "<^^", "8": "^^", "9": "^^>",
        "4": "<^", "5": "^", "6": "^>",
        "1": "<", "2": "", "3": ">",
        "0": "v", "A": "v>"},
  "3": {"7": "<<^^", "8": "<^^", "9": "^^",
        "4": "<<^", "5": "<^", "6": "^",
        "1": "<<", "2": "<", "3": "",
        "0": "<v", "A": "v"},
  "0": {"7": "^^^<", "8": "^^^", "9": "^^^>",
        "4": "^^<", "5": "^^", "6": "^^>",
        "1": "^<", "2": "^", "3": "^>",
        "0": "", "A": ">"},
  "A": {"7": "^^^<<", "8": "<^^^", "9": "^^^",
        "4": "^^<<", "5": "<^^", "6": "^^",
        "1": "^<<", "2": "<^", "3": "^",
        "0": "<", "A": ""}
}

ARROW_PATH = {
  "A": {"A": "", "^": "<", "v": "<v", "<": "v<<", ">": "v"},
  "^": {"A": ">", "^": "", "v": "v", "<": "v<", ">": "v>"},
  "v": {"A": "^>", "^": "^", "v": "", "<": "<", ">": ">"},
  "<": {"A": ">>^", "^": ">^", "v": ">", "<": "", ">": ">>"},
  ">": {"A": "^", "^": "<^", "v": "<", "<": "<<", ">": ""}
}


@cache
def compute(press, level) -> int:
  if level == 0:
    return len(press)

  prev = "A"
  length = 0

  for now in press:
    next_press = ARROW_PATH[prev][now] + "A"
    length += compute(next_press, level - 1)
    prev = now

  return length


def main() -> None:
  keys = open(sys.argv[1]).read().splitlines()
  complexity = 0

  for key in keys:
    # numeric -> directional #1
    prev = "A"
    num_to_dir1_press = ""

    for now in key:
      num_to_dir1_press = num_to_dir1_press + NUMPAD_PATH[prev][now] + "A"
      prev = now

    # recursively compute key presses for each level
    complexity += compute(num_to_dir1_press, 25) * int(key[:-1])

  print(complexity)


if __name__ == "__main__":
  main()